declare namespace api {
    export {
        configure,
        queryDatabase,
        sendEmail,
        uploadFile,
        deleteFile,
        fileExists,
        deleteDirectory,
        listDirectory,
        directoryExists
    }
}
export { api }

/**
 * Shared types for the HBO-ICT.Cloud library
 *
 * @module
 */
/** Type definition to make a clear distinction between successful and failed responses in the documentation */
declare type ApiFailReason = string;

/** Represents a failed response from the API */
declare interface ApiFailResponse {
    /** Reason why the response failed */
    reason: string;
}

/**
 * Remove all data from the session
 */
declare function clear(): void;

/**
 * Configure the HBO-ICT.Cloud API
 *
 * @param newOptions - Options-object to configure the HBO-ICT.Cloud API
 *
 * @throws When the Options-object is incomplete, an exception is thrown detailing the missing information.
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * api.configure({
 *     url: "https://api.hbo-ict.cloud",
 *     apiKey: "yourapikey",
 *     database: "yourdatabasename",
 *     environment: "targetenvironment"
 * });
 * ```
 */
declare function configure(newOptions: Options): boolean;

/**
 * Create a copy of a object
 *
 * @param object - Object to copy
 *
 * @returns Copy of the object
 */
declare function copyObject(object: any): any;

/**
 * Create a querystring of all keys in a given object
 *
 * @param object - Object to convert to a querystring
 *
 * @returns Querystring of all keys in the object
 *
 * @example
 * ```ts
 * import { utils } from "@hboictcloud/api";
 *
 * const queryString = utils.createQueryString({
 *     search: "paris",
 *     filters: [
 *         "tagA",
 *         "tagB"
 *     ]
 * });
 *
 * console.log(queryString); //search=paris&filters=tagA&filters=tagB
 * ```
 */
declare function createQueryString(object: Object): string;

/**
 * Create a URL with a querystring
 *
 * @param url - Absolute or relative URL
 * @param queryString - Object with all keys to add to the querystring
 *
 * @returns Returns the created URL
 *
 * @example
 * ```ts
 * import { utils } from "@hboictcloud/api";
 *
 * const url = utils.createUrl("matches.html", {
 *     search: "paris",
 *     filters: [
 *         "tagA",
 *         "tagB"
 *     ]
 * });
 *
 * console.log(url); //matches.html?search=paris&filters=tagA&filters=tagB
 * ```
 */
declare function createUrl(url: string, queryString?: QueryStringObject): string;

/**
 * Represents the Data-URL of a file
 */
declare interface DataURL {
    /** Filename of the file */
    fileName: string;
    /** Extension of the file, can be empty. */
    extension: string;
    /** MIME-type of the file */
    mimeType: string;
    /** Is set to `true` when the {@link mimeType} represents an image, otherwise `false`. */
    isImage: boolean;
    /** Data-URL of the file */
    url: string;
}

/**
 * Delete a directory from the uploads-folder on the configured HBO-ICT.Cloud environment, but only when it is empty.
 *
 * @param path - Path to the directory to delete, can contain forward slashes (/) to access subfolders. Folder has to be empty!
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with "OK").
 *
 * @example
 * Below is a simplified example.
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.deleteDirectory("test");
 * ```
 */
declare function deleteDirectory(path: string): Promise<string | ApiFailReason>;

/**
 * Delete a file from the uploads-folder on the configured HBO-ICT.Cloud environment
 *
 * @param fileName - Path to the file to delete, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with "OK").
 *
 * @example
 * Below is a simplified example, you will have to add try/catch and async/await structures yourself.
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.deleteFile("test.png");
 * console.log(data);
 * ```
 */
declare function deleteFile(fileName: string): Promise<string | ApiFailReason>;

/**
 * Checks if a directory exists inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param path - Path to the directory to check for existence, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`boolean` set to `true` if directory exists, otherwise `false`).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.directoryExists("test");
 * console.log(data);
 * ```
 */
declare function directoryExists(path: string): Promise<boolean | ApiFailReason>;

/**
 * Represents an email. Is only considered valid when all required fields are provided and either {@link text} or {@link html} have a value.
 */
declare interface Email {
    /** Sender of the email */
    from: EmailAddress;
    /** Receivers of the email */
    to: EmailAddress[] | string;
    /** Other receivers of the email */
    cc?: EmailAddress[] | string;
    /** Blind receivers of the email */
    bcc?: EmailAddress[] | string;
    /** Subject of the email */
    subject: string;
    /** Contents of the email as text */
    text?: string;
    /** Contents of the email as html */
    html?: string;
}

/**
 * Represents a single email contact
 */
declare interface EmailAddress {
    /** Name of the contact */
    name?: string;
    /** Email address of the contact */
    address: string;
}

/**
 * Download a file from a given URL as text and parse it to a list of HTML elements
 *
 * @param url - URL of the HTML-file to download and parse
 * @param options - Additional fetch-configuration to apply during the download
 *
 * @returns Returns a promise with a list of all HTML elements
 */
declare function fetchAndParseHtml(url: string, options?: RequestInit): Promise<NodeList>;

/**
 * Download a file from a given URL as a blob
 *
 * @param url URL of the file to download as a blob
 * @param options - Additional fetch-configuration to apply during the download
 *
 * @returns Returns a promise with the downloaded file as a blob-object
 */
declare function fetchBlob(url: string, options?: RequestInit): Promise<Blob>;

/**
 * Download a file from a given URL as JSON
 *
 * @param url - URL of the file to download as JSON
 * @param options - Additional fetch-configuration to apply during the download
 *
 * @returns Returns a promise with the downloaded JSON as an object
 */
declare function fetchJson(url: string, options?: RequestInit): Promise<any>;

/**
 * Download a file from a given URL as text
 *
 * @param url - URL of the file to download as text
 * @param options - Additional fetch-configuration to apply during the download
 *
 * @returns Returns a promise with the downloaded text as a string
 */
declare function fetchText(url: string, options?: RequestInit): Promise<string>;

/**
 * Checks if a file exists inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param fileName - Path to the file to check for existence, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`boolean` set to `true` if file exists, otherwise `false`).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.fileExists("test.png");
 * console.log(data);
 * ```
 */
declare function fileExists(fileName: string): Promise<boolean | ApiFailReason>;

/**
 * Get a specific key from the session. If you need multiple keys from the session, it's better to use {@link getAll} instead.
 *
 * @param key - Name of the key to get
 * @param [defaultValue] - Value to return if the key does not exist or returns empty. (Default: `undefined`)
 *
 * @returns Returns the value of the key, or the specified default value
 */
declare function get(key: string, defaultValue?: any): any;

/**
 * Get all keys from the session as an object
 *
 * @returns Returns an object containing all keys in the session
 */
declare function getAll(): any;

/**
 * Convert a file-input to a Data-URL
 *
 * @param fileInput - HTMLInputElement or DOM-selector of the file-input.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed ({@link DataURL | `DataURL`} of the file).
 *
 * @example
 * ```ts
 * import { utils } from "@hboictcloud/api";
 *
 * try {
 *     const data = await utils.getDataUrl("#fileInput");
 *
 *     console.log(data);
 * }
 * catch(reason) {
 *     console.log(reason);
 * }
 * ```
 */
declare function getDataUrl(fileInput: HTMLInputElement | string): Promise<DataURL | string>;

/**
 * Get a specific key from the querystring. If you need multiple keys from the querystring, it's better to use {@link getQueryStringAsObject} instead.
 *
 * @param key - Name of the key to get
 * @param [defaultValue] - Value to return if the key does not exist or returns empty. (Default: `undefined`)
 *
 * @returns Returns the value of the key, or the specified default value.
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * //URL: profile.html?id=15
 * const id = url.getFromQueryString("id");
 * console.log(id); //15
 * ```
 */
declare function getFromQueryString(key: string, defaultValue?: any): any;

/**
 * Get the querystring as an object
 *
 * @returns Returns the querystring as an object
 */
declare function getQueryStringAsObject(): any;

/**
 * List all files and directories inside a directory, inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param path - Path to the directory to list, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string[]` with files and directories).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.listDirectory("test");
 * console.log(data);
 * ```
 */
declare function listDirectory(path: string): Promise<string[] | ApiFailReason>;

declare namespace localization {
    export {
        setTranslations,
        switchLanguage,
        translate
    }
}
export { localization }

/**
 * Holds all options for the HBO-ICT.Cloud API
 */
declare type Options = {
    /** URL of the HBO-ICT.Cloud API */
    url: string;
    /** API-Key to authenticate yourself with the HBO-ICT.Cloud API */
    apiKey: string;
    /** Name of the database you want to query by default */
    database: string;
    /** Name of the environment you want to manipulate files on */
    environment: ("mockup" | "dev" | "live") | string;
};

/**
 * Parse a `string` containing HTML to a list of HTML elements
 *
 * @param html - HTML to parse to a list of HTML elements
 *
 * @returns List of all HTML elements
 */
declare function parseHtml(html: string): NodeList;

/**
 * Parse all keys of a given querystring to an object
 *
 * @param queryString - Querystring to parse to an object
 *
 * @returns Object with all the keys found in the querystring
 */
declare function parseQueryString(queryString: string): any;

/** Type definition of function used to reject a promise */
declare type PromiseReject = ((reason?: string) => void) & {};

/** Type definition of function used to resolve a promise */
declare type PromiseResolve = ((value: any) => void) & {};

/**
 * Send an SQL-query to the configured database
 *
 * @param query - Query written in SQL
 * @param values - Array of values to replace question marks (?) in the query with. Replacing is done from left to right.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`T[]` with results)
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * try {
 *     const data = await api.queryDatabase(
 *         "SELECT * FROM test WHERE name = ? and age <= ?",
 *         ["Lennard", 30]
 *     );
 *
 *     console.log(data);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
declare function queryDatabase<T = any>(query: string, ...values: any): Promise<T[] | ApiFailReason>;

/** Represents a querystring as an object */
declare interface QueryStringObject {
    [key: string]: any;
}

/**
 * Generate a `string` of random characters
 *
 * @param length - Length of the `string` to generate
 * @param includeSymbols - Set to `true` to include non-alphanumeric characters, otherwise `false`.
 *
 * @returns Returns the generated random string
 */
declare function randomString(length: number, includeSymbols: boolean): string;

/**
 * Redirect the browser to a new URL, leaving the current URL in the back/forward browser-history.
 *
 * @param url - Absolute or relative URL to redirect to
 * @param queryString - Object with all keys to add to the querystring
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * url.redirect("profile.html", {
 *     id: 15
 * });
 * ```
 */
declare function redirect(url: string, queryString?: QueryStringObject): void;

/**
 * Remove a specific key from the session
 *
 * @param key - Name of the key to remove
 */
declare function remove(key: string): void;

/**
 * Replace the URL visible in the browser, also replacing the current URL in the back/forward browser-history. Doesn't actually redirect the page, just updates the URL.
 *
 * @param url - Absolute or relative URL to redirect to
 * @param queryString - Object with all keys to add to the querystring
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * url.replace("profile.html", {
 *     id: 15
 * });
 * ```
 */
declare function replace(url: string, queryString?: QueryStringObject): void;

/**
 * Send an email
 *
 * @param email - Email-object describing the email to send
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with status)
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * try {
 *     const data = await api.sendEmail({
 *         from: {
 *             name: "Group",
 *             address: "group@fys.cloud"
 *         },
 *         to: [
 *             {
 *                 name: "Lennard Fonteijn",
 *                 address: "l.c.j.fonteijn@hva.nl"
 *             }
 *         ],
 *         subject: "Just a test!",
 *         html: "<h1>Hello Lennard!</h1><p>This is an email :)</p>"
 *     });
 *
 *     console.log(data);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
declare function sendEmail(email: Email): Promise<string | ApiFailReason>;

declare namespace session {
    export {
        getAll,
        get,
        set,
        remove,
        clear
    }
}
export { session }

/**
 * Set a specific key in the session
 *
 * @param key - Name of the key to set
 * @param value - Value to set the key to
 */
declare function set(key: string, value: any): void;

/**
 * Register all the translations to localize a webpage
 *
 * @param translations - Free-form object with all translations
 *
 * @example
 * ```ts
 * import { localization } from "@hboictcloud/api";
 *
 * localization.setTranslations({
 *      okButton: {
 *          nl: "Oke!",
 *          en: "OK!"
 *      }
 * });
 * ```
 */
declare function setTranslations(translationObject: any): void;

/**
 * Switch the active language, will be immediately applied.
 *
 * @param language - Name of the language to activate
 */
declare function switchLanguage(language: string): void;

/**
 * Convert a Date-object to an SQL accepted String-format
 *
 * @param inputDate - Date-object to convert
 *
 * @returns SQL accepted String-format of the Date-object
 */
declare function toSqlDateTime(inputDate: Date): string;

/**
 * Apply the translations for the active language, useful for dynamic changes on a webpage. This will only translate texts inside elements, not their attributes (for example `placeholder`)!
 *
 * @param [force] - Set to `true` to translate everything on a webpage, otherwise `false` to only translate untranslated parts (Default: `false`).
 */
declare function translate(force?: boolean): void;

declare namespace types {
    export {
        ApiFailReason,
        PromiseResolve,
        PromiseReject,
        ApiFailResponse,
        QueryStringObject,
        Options,
        EmailAddress,
        Email,
        DataURL
    }
}
export { types }

/**
 * Upload a file to the uploads-folder on the configured HBO-ICT.Cloud environment
 *
 * @param fileName - Name of the file to upload, has to contain an extension.
 * @param dataUrl - Data-URL of the file in base64
 * @param [overwrite] - Set to `true` to overwrite an existing file, otherwise `false`. (Default: `false`)
 *
 * @returns {Promise<string>} Returns a promise which can either fail (`string` with reason) or succeed (`string` with URL to file)
 *
 * @example
 * The example below will get the Data-URL from a file-input and upload it as "test.png".
 *
 * ```ts
 * import { api, utils } from "@hboictcloud/api";
 *
 * try {
 *     const data = await utils.getDataUrl(document.querySelector("#fileUpload"));
 *     const uploadResponse = await api.uploadFile("test.png", data.url);
 *
 *     console.log(data, uploadResponse);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
declare function uploadFile(fileName: string, dataUrl: string, overwrite?: boolean): Promise<string | ApiFailReason>;

declare namespace url {
    export {
        getQueryStringAsObject,
        getFromQueryString,
        redirect,
        replace
    }
}
export { url }

declare namespace utils {
    export {
        getDataUrl,
        createUrl,
        randomString,
        toSqlDateTime,
        copyObject,
        createQueryString,
        parseQueryString,
        parseHtml,
        fetchAndParseHtml,
        fetchText,
        fetchJson,
        fetchBlob
    }
}
export { utils }

export { }
