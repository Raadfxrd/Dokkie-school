let i;
function w(e) {
  const t = [];
  if (e.url || t.push("- url => API-URL from HBO-ICT.Cloud"), e.apiKey || t.push("- apiKey => API-Key from HBO-ICT.Cloud"), e.database || t.push("- database => Name of target database for queries"), e.environment || t.push("- environment => Name of the environment"), t.length > 0)
    throw `HBO-ICT.Cloud API configuration is missing one or more properties:
${t.join(
      `
`
    )}`;
  return i = e, !0;
}
function N(e, ...t) {
  return u(), c(i.url + "/db", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      query: e,
      values: t,
      database: i.database
    })
  });
}
function z(e) {
  return u(), c(i.url + "/mail", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify(e)
  });
}
function $(e, t, n = !1) {
  return u(), !e || !t ? Promise.reject("fileName or dataUrl cannot be empty!") : c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e,
      action: "upload",
      overwrite: n || !1,
      buffer: t.match("^data:(.*?);base64,(.*?)$")[2]
    })
  });
}
function x(e) {
  return u(), e ? c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e,
      action: "deleteFile"
    })
  }) : Promise.reject("fileName cannot be empty!");
}
function B(e) {
  return u(), e ? c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e,
      action: "fileExists"
    })
  }) : Promise.reject("fileName cannot be empty!");
}
function C(e) {
  return u(), c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e || "/",
      action: "deleteDirectory"
    })
  });
}
function I(e) {
  return u(), c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e || "/",
      action: "list"
    })
  });
}
function K(e) {
  return u(), e ? c(i.url + "/file", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${i.apiKey}`
    },
    body: JSON.stringify({
      environment: i.environment,
      fileName: e,
      action: "directoryExists"
    })
  }) : Promise.reject("path cannot be empty!");
}
function c(e, t) {
  return new Promise(
    async (n, o) => {
      let a;
      try {
        a = await fetch(e, t);
      } catch (r) {
        y(o, 500, r);
        return;
      }
      try {
        const r = await a.json();
        a.status === 200 ? n(r) : y(
          o,
          a.status,
          r.reason
        );
      } catch (r) {
        y(o, 500, r);
      }
    }
  );
}
function y(e, t, n) {
  e(t === 400 && n || "Something bad happened, see console.");
}
function u() {
  if (!i)
    throw "HBO-ICT.Cloud API is not properly configured!";
}
const ie = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  configure: w,
  deleteDirectory: C,
  deleteFile: x,
  directoryExists: K,
  fileExists: B,
  listDirectory: I,
  queryDatabase: N,
  sendEmail: z,
  uploadFile: $
}, Symbol.toStringTag, { value: "Module" }));
let v, p;
function D(e) {
  v = e;
}
function J(e) {
  p = e, P(!0);
}
function P(e = !1) {
  const t = e ? "[data-translate]" : "[data-translate]:not([translated])";
  document.querySelectorAll(t).forEach((n) => {
    const o = n.dataset.translate, a = o.split(".");
    let r = v;
    for (let s = 0; s < a.length && (r = r[a[s]], r !== void 0); s++)
      ;
    n.setAttribute("translated", ""), n.innerHTML = r && r[p] ? r[p] : `[${o}]`;
  });
}
const ae = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  setTranslations: D,
  switchLanguage: J,
  translate: P
}, Symbol.toStringTag, { value: "Module" })), T = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", M = " `!\"$%^&*()-_=+[{]};:'@#~|,<.>/?\\", F = T + M, U = new DOMParser();
function E(e) {
  return new Promise(function(t, n) {
    const o = typeof e == "string" ? document.querySelector(e) : e;
    let a, r;
    if (o)
      a = o.files[0], r = o.value.split(/(\\|\/)/g).pop();
    else {
      n("Could not find element!");
      return;
    }
    const s = new FileReader();
    s.addEventListener(
      "load",
      function() {
        const f = s.result, b = f.match("^data:(.*?);base64,")[1], S = r.lastIndexOf(".");
        t({
          fileName: r,
          extension: S > -1 ? r.substring(S + 1) : "",
          mimeType: b,
          isImage: b.indexOf("image/") >= 0,
          url: f
        });
      },
      !1
    ), a ? s.readAsDataURL(a) : n(`Could not load ${r || "file"}!`);
  });
}
function h(e, t) {
  let n = e;
  return t && Object.keys(t).length > 0 && (n += `?${_(t)}`), n;
}
function H(e, t) {
  const n = t ? F : T, o = [];
  for (let a = 0; a < e; a++)
    o.push(
      n.charAt(Math.floor(Math.random() * n.length))
    );
  return o.join("");
}
function L(e) {
  const t = new Date(e);
  return new Date(
    t.getTime() - t.getTimezoneOffset() * 6e4
  ).toISOString().slice(0, 19).replace("T", " ");
}
function d(e) {
  return W(e);
}
function _(e) {
  if (!e)
    return "";
  const t = new URLSearchParams();
  for (const [n, o] of Object.entries(e))
    if (Array.isArray(o))
      for (const a of o)
        t.append(n, a || "");
    else
      t.append(n, o || "");
  return t.toString();
}
function g(e) {
  return k(e);
}
function A(e) {
  return U.parseFromString(e, "text/html").body.childNodes;
}
async function Q(e, t) {
  const n = await j(e, t);
  return A(n);
}
async function j(e, t) {
  return (await fetch(e, t)).text();
}
async function R(e, t) {
  return (await fetch(e, t)).json();
}
async function q(e, t) {
  return (await fetch(e, t)).blob();
}
function W(e) {
  const t = Array.isArray(e) ? [] : {};
  let n, o;
  for (n in e)
    o = e[n], t[n] = typeof o == "object" && o !== null ? d(o) : o;
  return t;
}
function k(e) {
  if (!e)
    return {};
  if (e = e.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, ""), !e)
    return {};
  const t = {}, n = e.split("&"), o = n.length;
  let a, r, s;
  for (let f = 0; f < o; f++)
    a = n[f].split("="), r = O(a.shift()), s = a.length ? O(a.join("=")) : null, Object.prototype.hasOwnProperty.call(t, r) ? ((typeof t[r] == "string" || t[r] === null) && (t[r] = [t[r]]), t[r].push(s)) : t[r] = s;
  return t;
}
function O(e) {
  e += "";
  try {
    return decodeURIComponent(e);
  } catch {
    return e;
  }
}
const se = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  copyObject: d,
  createQueryString: _,
  createUrl: h,
  fetchAndParseHtml: Q,
  fetchBlob: q,
  fetchJson: R,
  fetchText: j,
  getDataUrl: E,
  parseHtml: A,
  parseQueryString: g,
  randomString: H,
  toSqlDateTime: L
}, Symbol.toStringTag, { value: "Module" }));
let l = {};
ee();
function G() {
  return d(l);
}
function V(e, t = void 0) {
  return l[e] ? d({
    temp: l[e]
  }).temp : t;
}
function X(e, t) {
  l[e] = t, m();
}
function Y(e) {
  delete l[e], m();
}
function Z() {
  l.clear(), m();
}
function ee() {
  try {
    const e = localStorage.getItem("session");
    e && (l = JSON.parse(e));
  } catch {
  }
  l || (l = {}, m());
}
function m() {
  localStorage.setItem("session", JSON.stringify(l));
}
const le = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  clear: Z,
  get: V,
  getAll: G,
  remove: Y,
  set: X
}, Symbol.toStringTag, { value: "Module" })), ce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
function te() {
  return g(window.location.search);
}
function ne(e, t = void 0) {
  return g(window.location.search)[e] || t;
}
function re(e, t) {
  window.location.assign(h(e, t));
}
function oe(e, t) {
  history.replaceState({}, "", h(e, t));
}
const ue = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getFromQueryString: ne,
  getQueryStringAsObject: te,
  redirect: re,
  replace: oe
}, Symbol.toStringTag, { value: "Module" }));
export {
  ie as api,
  ae as localization,
  le as session,
  ce as types,
  ue as url,
  se as utils
};
//# sourceMappingURL=hboictcloud-api.js.map
