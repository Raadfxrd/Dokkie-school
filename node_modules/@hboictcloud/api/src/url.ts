/**
 * URL-extension for the HBO-ICT.Cloud library
 *
 * @module
 */
import { QueryStringObject } from "./types";
import { createUrl, parseQueryString } from "./utils";

/**
 * Get the querystring as an object
 *
 * @returns Returns the querystring as an object
 */
export function getQueryStringAsObject(): any {
    return parseQueryString(window.location.search);
}

/**
 * Get a specific key from the querystring. If you need multiple keys from the querystring, it's better to use {@link getQueryStringAsObject} instead.
 *
 * @param key - Name of the key to get
 * @param [defaultValue] - Value to return if the key does not exist or returns empty. (Default: `undefined`)
 *
 * @returns Returns the value of the key, or the specified default value.
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * //URL: profile.html?id=15
 * const id = url.getFromQueryString("id");
 * console.log(id); //15
 * ```
 */
export function getFromQueryString(
    key: string,
    defaultValue: any = undefined,
): any {
    const copy = parseQueryString(window.location.search);

    return copy[key] || defaultValue;
}

/**
 * Redirect the browser to a new URL, leaving the current URL in the back/forward browser-history.
 *
 * @param url - Absolute or relative URL to redirect to
 * @param queryString - Object with all keys to add to the querystring
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * url.redirect("profile.html", {
 *     id: 15
 * });
 * ```
 */
export function redirect(url: string, queryString?: QueryStringObject): void {
    window.location.assign(createUrl(url, queryString));
}

/**
 * Replace the URL visible in the browser, also replacing the current URL in the back/forward browser-history. Doesn't actually redirect the page, just updates the URL.
 *
 * @param url - Absolute or relative URL to redirect to
 * @param queryString - Object with all keys to add to the querystring
 *
 * @example
 * ```ts
 * import { url } from "@hboictcloud/api";
 *
 * url.replace("profile.html", {
 *     id: 15
 * });
 * ```
 */
export function replace(url: string, queryString?: QueryStringObject): void {
    history.replaceState({}, "", createUrl(url, queryString));
}
