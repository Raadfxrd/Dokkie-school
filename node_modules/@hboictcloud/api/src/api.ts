/**
 * API-extension for the HBO-ICT.Cloud library
 *
 * @module
 */
import {
    ApiFailResponse,
    ApiFailReason,
    PromiseReject,
    PromiseResolve,
    Options,
    Email,
} from "./types";

let options: Options = undefined!;

/**
 * Configure the HBO-ICT.Cloud API
 *
 * @param newOptions - Options-object to configure the HBO-ICT.Cloud API
 *
 * @throws When the Options-object is incomplete, an exception is thrown detailing the missing information.
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * api.configure({
 *     url: "https://api.hbo-ict.cloud",
 *     apiKey: "yourapikey",
 *     database: "yourdatabasename",
 *     environment: "targetenvironment"
 * });
 * ```
 */
export function configure(newOptions: Options): boolean {
    const errors = [];

    if (!newOptions.url) {
        errors.push("- url => API-URL from HBO-ICT.Cloud");
    }

    if (!newOptions.apiKey) {
        errors.push("- apiKey => API-Key from HBO-ICT.Cloud");
    }

    if (!newOptions.database) {
        errors.push("- database => Name of target database for queries");
    }

    if (!newOptions.environment) {
        errors.push("- environment => Name of the environment");
    }

    if (errors.length > 0) {
        throw `HBO-ICT.Cloud API configuration is missing one or more properties:\n${errors.join(
            "\n",
        )}`;
    }

    options = newOptions;

    return true;
}

/**
 * Send an SQL-query to the configured database
 *
 * @param query - Query written in SQL
 * @param values - Array of values to replace question marks (?) in the query with. Replacing is done from left to right.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`T[]` with results)
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * try {
 *     const data = await api.queryDatabase(
 *         "SELECT * FROM test WHERE name = ? and age <= ?",
 *         ["Lennard", 30]
 *     );
 *
 *     console.log(data);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
export function queryDatabase<T = any>(
    query: string,
    ...values: any
): Promise<T[] | ApiFailReason> {
    assertConfiguration();

    return handleFetch<T[]>(options.url + "/db", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            query: query,
            values: values,
            database: options.database,
        }),
    });
}

/**
 * Send an email
 *
 * @param email - Email-object describing the email to send
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with status)
 *
 * @example
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * try {
 *     const data = await api.sendEmail({
 *         from: {
 *             name: "Group",
 *             address: "group@fys.cloud"
 *         },
 *         to: [
 *             {
 *                 name: "Lennard Fonteijn",
 *                 address: "l.c.j.fonteijn@hva.nl"
 *             }
 *         ],
 *         subject: "Just a test!",
 *         html: "<h1>Hello Lennard!</h1><p>This is an email :)</p>"
 *     });
 *
 *     console.log(data);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
export function sendEmail(email: Email): Promise<string | ApiFailReason> {
    assertConfiguration();

    return handleFetch<string>(options.url + "/mail", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify(email),
    });
}

/**
 * Upload a file to the uploads-folder on the configured HBO-ICT.Cloud environment
 *
 * @param fileName - Name of the file to upload, has to contain an extension.
 * @param dataUrl - Data-URL of the file in base64
 * @param [overwrite] - Set to `true` to overwrite an existing file, otherwise `false`. (Default: `false`)
 *
 * @returns {Promise<string>} Returns a promise which can either fail (`string` with reason) or succeed (`string` with URL to file)
 *
 * @example
 * The example below will get the Data-URL from a file-input and upload it as "test.png".
 *
 * ```ts
 * import { api, utils } from "@hboictcloud/api";
 *
 * try {
 *     const data = await utils.getDataUrl(document.querySelector("#fileUpload"));
 *     const uploadResponse = await api.uploadFile("test.png", data.url);
 *
 *     console.log(data, uploadResponse);
 * }
 * catch(reason: string) {
 *     console.log(reason);
 * }
 * ```
 */
export function uploadFile(
    fileName: string,
    dataUrl: string,
    overwrite: boolean = false,
): Promise<string | ApiFailReason> {
    assertConfiguration();

    if (!fileName || !dataUrl) {
        return Promise.reject("fileName or dataUrl cannot be empty!");
    }

    return handleFetch<string>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: fileName,
            action: "upload",
            overwrite: overwrite || false,
            buffer: dataUrl.match("^data:(.*?);base64,(.*?)$")![2],
        }),
    });
}

/**
 * Delete a file from the uploads-folder on the configured HBO-ICT.Cloud environment
 *
 * @param fileName - Path to the file to delete, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with "OK").
 *
 * @example
 * Below is a simplified example, you will have to add try/catch and async/await structures yourself.
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.deleteFile("test.png");
 * console.log(data);
 * ```
 */
export function deleteFile(fileName: string): Promise<string | ApiFailReason> {
    assertConfiguration();

    if (!fileName) {
        return Promise.reject("fileName cannot be empty!");
    }

    return handleFetch<string>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: fileName,
            action: "deleteFile",
        }),
    });
}

/**
 * Checks if a file exists inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param fileName - Path to the file to check for existence, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`boolean` set to `true` if file exists, otherwise `false`).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.fileExists("test.png");
 * console.log(data);
 * ```
 */
export function fileExists(fileName: string): Promise<boolean | ApiFailReason> {
    assertConfiguration();

    if (!fileName) {
        return Promise.reject("fileName cannot be empty!");
    }

    return handleFetch<boolean>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: fileName,
            action: "fileExists",
        }),
    });
}

/**
 * Delete a directory from the uploads-folder on the configured HBO-ICT.Cloud environment, but only when it is empty.
 *
 * @param path - Path to the directory to delete, can contain forward slashes (/) to access subfolders. Folder has to be empty!
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string` with "OK").
 *
 * @example
 * Below is a simplified example.
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.deleteDirectory("test");
 * ```
 */
export function deleteDirectory(path: string): Promise<string | ApiFailReason> {
    assertConfiguration();

    /*if (!path) {
            return Promise.reject("path cannot be empty!");
        }*/

    return handleFetch<string>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: path || "/",
            action: "deleteDirectory",
        }),
    });
}

/**
 * List all files and directories inside a directory, inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param path - Path to the directory to list, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`string[]` with files and directories).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.listDirectory("test");
 * console.log(data);
 * ```
 */
export function listDirectory(path: string): Promise<string[] | ApiFailReason> {
    assertConfiguration();

    /*if (!path) {
            return Promise.reject("path cannot be empty!");
        }*/

    return handleFetch<string[]>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: path || "/",
            action: "list",
        }),
    });
}

/**
 * Checks if a directory exists inside the uploads-folder on the configured HBO-ICT.Cloud environment.
 *
 * @param path - Path to the directory to check for existence, can contain forward slashes (/) to access subfolders.
 *
 * @returns Returns a promise which can either fail (`string` with reason) or succeed (`boolean` set to `true` if directory exists, otherwise `false`).
 *
 * @example
 * Below is a simplified example.
 *
 * ```ts
 * import { api } from "@hboictcloud/api";
 *
 * const data = await api.directoryExists("test");
 * console.log(data);
 * ```
 */
export function directoryExists(
    path: string,
): Promise<boolean | ApiFailReason> {
    assertConfiguration();

    if (!path) {
        return Promise.reject("path cannot be empty!");
    }

    return handleFetch<boolean>(options.url + "/file", {
        method: "POST",
        headers: {
            Authorization: `Bearer ${options.apiKey}`,
        },
        body: JSON.stringify({
            environment: options.environment,
            fileName: path,
            action: "directoryExists",
        }),
    });
}

function handleFetch<T = any>(
    url: string,
    fetchOptions: RequestInit,
): Promise<T | ApiFailReason> {
    return new Promise(
        async (resolve: PromiseResolve, reject: PromiseReject) => {
            let response: Response;

            try {
                response = await fetch(url, fetchOptions);
            } catch (error) {
                apiFail(reject, 500, error);

                return;
            }

            try {
                const json = await response.json();

                if (response.status === 200) {
                    resolve(json);
                } else {
                    apiFail(
                        reject,
                        response.status,
                        (<ApiFailResponse>json).reason,
                    );
                }
            } catch (error) {
                apiFail(reject, 500, error);
            }
        },
    );
}

function apiFail(
    reject: PromiseReject,
    statusCode: number,
    reason?: string | any,
): void {
    if (statusCode === 400) {
        reject(reason || "Something bad happened, see console.");
    } else {
        reject("Something bad happened, see console.");
    }
}

function assertConfiguration(): void {
    if (!options) {
        throw "HBO-ICT.Cloud API is not properly configured!";
    }
}
