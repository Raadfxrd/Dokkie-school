/**
 * Localization-extension for the HBO-ICT.Cloud library
 *
 * @module
 */
let translations: any = undefined!;
let activeLanguage: string = undefined!;

/**
 * Register all the translations to localize a webpage
 *
 * @param translations - Free-form object with all translations
 *
 * @example
 * ```ts
 * import { localization } from "@hboictcloud/api";
 *
 * localization.setTranslations({
 *      okButton: {
 *          nl: "Oke!",
 *          en: "OK!"
 *      }
 * });
 * ```
 */
export function setTranslations(translationObject: any): void {
    translations = translationObject;
}

/**
 * Switch the active language, will be immediately applied.
 *
 * @param language - Name of the language to activate
 */
export function switchLanguage(language: string): void {
    activeLanguage = language;

    translate(true);
}

/**
 * Apply the translations for the active language, useful for dynamic changes on a webpage. This will only translate texts inside elements, not their attributes (for example `placeholder`)!
 *
 * @param [force] - Set to `true` to translate everything on a webpage, otherwise `false` to only translate untranslated parts (Default: `false`).
 */
export function translate(force: boolean = false): void {
    const selector = force
        ? "[data-translate]"
        : "[data-translate]:not([translated])";

    document.querySelectorAll(selector).forEach((element: Element) => {
        const localizeKey = (<HTMLElement>element).dataset.translate!;
        const localizeKeys = localizeKey.split(".");

        let result = translations;

        for (let i = 0; i < localizeKeys.length; i++) {
            result = result[localizeKeys[i]];

            if (result === undefined) {
                break;
            }
        }

        element.setAttribute("translated", "");
        element.innerHTML =
            result && result[activeLanguage]
                ? result[activeLanguage]
                : `[${localizeKey}]`;
    });
}
