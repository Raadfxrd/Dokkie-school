/**
 * Session-extension for the HBO-ICT.Cloud library
 *
 * @module
 */
import { copyObject } from "./utils";

let session: any = {};

loadSession();

/**
 * Get all keys from the session as an object
 *
 * @returns Returns an object containing all keys in the session
 */
export function getAll(): any {
    return copyObject(session);
}

/**
 * Get a specific key from the session. If you need multiple keys from the session, it's better to use {@link getAll} instead.
 *
 * @param key - Name of the key to get
 * @param [defaultValue] - Value to return if the key does not exist or returns empty. (Default: `undefined`)
 *
 * @returns Returns the value of the key, or the specified default value
 */
export function get(key: string, defaultValue: any = undefined): any {
    //Instead of copying the whole session, just copy the requested key, if it exists.
    if (session[key]) {
        const copy = copyObject({
            temp: session[key],
        });

        return copy.temp;
    }

    return defaultValue;
}

/**
 * Set a specific key in the session
 *
 * @param key - Name of the key to set
 * @param value - Value to set the key to
 */
export function set(key: string, value: any): void {
    session[key] = value;

    saveSession();
}

/**
 * Remove a specific key from the session
 *
 * @param key - Name of the key to remove
 */
export function remove(key: string): void {
    delete session[key];

    saveSession();
}

/**
 * Remove all data from the session
 */
export function clear(): void {
    session.clear();

    saveSession();
}

function loadSession(): void {
    try {
        const loadedSession = localStorage.getItem("session");

        if (loadedSession) {
            session = JSON.parse(loadedSession);
        }
    } catch (e) {
        //Do nothing
    }

    if (!session) {
        session = {};

        saveSession();
    }
}

function saveSession(): void {
    localStorage.setItem("session", JSON.stringify(session));
}
